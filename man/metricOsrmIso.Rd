% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metricOsrmIso.R
\name{metricOsrmIso}
\alias{metricOsrmIso}
\title{Calculer des isochrones ou des isodistances autour d'un ou plusieurs points}
\usage{
metricOsrmIso(
  loc,
  breaks = seq(from = 0, to = 60, length.out = 5),
  res = 30,
  returnclass = "sf",
  fusion = TRUE,
  courbes = "isochrones",
  exclude = NULL,
  interactive = FALSE
)
}
\arguments{
\item{loc}{vecteur numérique (id/lon/lat ou lon/lat), data.frame (3 colonnes id/lon/lat ou 2 colonnes lon/lat), objet sf ou sp (SpatialPointsDataFrame ou SpatialPolygonsDataFrame) précisant le(s) point(s)
de départ, centre(s) des isochrones.}

\item{breaks}{vecteur numérique. Séquence de valeurs numériques indiquant les temps en minutes relatifs aux courbes isochrones ou les distances en kilomètres relatives aux courbes isodistances.}

\item{res}{numérique. Valeur numérique indiquant la résolution des courbes isochrones, la précision des contours.}

\item{returnclass}{texte. "sf" (par défaut) ou "sp". Renvoie un objet sf (MULTIPOLYGON) ou sp (SpatialPolygonDataFrame).}

\item{fusion}{booléen. Si TRUE (par défaut), fusion des courbes isochrones si il y a plusieurs points loc (voir details).}

\item{courbes}{texte. "isochrones" (par défaut) ou "isodistances". Choix des courbes iso : isochrones ou isodistances.}

\item{exclude}{texte. Permet aux trajets d'éviter les autoroutes (“motorway”), les péages (“toll”) ou les ferries (“ferry”). Par défaut NULL.}

\item{interactive}{booléen. Choix du contexte d'exécution. Si TRUE, contexte shiny. Par défaut FALSE.}
}
\value{
Une liste d'un ou plusieurs objets sf (MULTIPOLYGON) ou sp (SpatialPolygonDataFrame).
}
\description{
La fonction metricOsrmIso permet de créer des courbes d’isochrones ou d'isodistances mesurant l’accessibilité
en temps de parcours ou en distance autour d’un ou plusieurs points.
}
\details{
Le temps de calcul peut être important si le nombre de points de départ (loc) et la résolution (res) sont élevés.

Le nombre de couples calculé est égal au nombre de points de départ x (résolution)².

Si fusion = TRUE, une résolution élevée peut être nécessaire si les points de départ sont très distants.

Le nombre de breaks n’influe pas sur le temps de calcul.

Si fusion = TRUE (par défaut), les courbes d'isochrones ou d'isodistances fusionnent pour former autant de polygones que de classes (nombre de breaks).
Cas d'utilisation : pour mesurer l'accessibilité d'un type d'équipement le plus proche en temps.

Si fusion = FALSE, les courbes d'isochrones ou d'isodistances sont calculées autour de chaque point.
Cas d'utilisation : pour mesurer séparément l'accessibilité d'un ou plusieurs équipements.
}
\examples{
# Specification d'un serveur osrm obligatoire pour executer les exemples
options(osrm.server = "https://metric-osrm-backend.lab.sspcloud.fr/")

# Specification du profil
options(osrm.profile = "driving")

# Calcul d'isochrones a partir d'un point.
iso1 <- metricOsrmIso(loc = data.frame(lon = 4.92,
                                       lat = 46.15),
                      courbes = "isochrones")

plot(sf::st_geometry(iso1[[1]]))

# Calcul de deux isochrones separees.
iso2 <- metricOsrmIso(loc = data.frame(lon = c(4.92,4.98),
                                       lat = c(46.15,46.30)),
                      breaks = c(0,30,60),
                      res = 20,
                      fusion = FALSE,
                      courbes = "isochrones")

plot(sf::st_geometry(iso2[[2]]), border = "blue")
plot(sf::st_geometry(iso2[[1]]), border = "red", add = TRUE)

# Calcul d'isochrones fusionnees a partir de deux points.
iso3 <- metricOsrmIso(loc = data.frame(lon = c(4.92,4.98),
                                       lat = c(46.15,46.30)),
                      breaks = c(0,30,60),
                      res = 20,
                      fusion = TRUE,
                      courbes = "isochrones")

plot(sf::st_geometry(iso3[[1]]))

# Calcul d'isodistances fusionnees a partir de deux points.
iso4 <- metricOsrmIso(loc = data.frame(lon = c(4.92,4.98),
                                       lat = c(46.15,46.30)),
                      breaks = c(0,30,60),
                      res = 20,
                      fusion = TRUE,
                      courbes = "isodistances")

plot(sf::st_geometry(iso4[[1]]))

}
